// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Operation operation
// swagger:model Operation
type Operation struct {

	// acquired lock
	// Read Only: true
	AcquiredLock *bool `json:"acquiredLock,omitempty"`

	// ended at
	// Read Only: true
	// Format: date-time
	EndedAt strfmt.DateTime `json:"endedAt,omitempty"`

	// error type
	// Read Only: true
	ErrorType ErrorType `json:"errorType,omitempty"`

	// messages
	// Read Only: true
	Messages []*Message `json:"messages"`

	// mta Id
	// Read Only: true
	MtaID string `json:"mtaId,omitempty"`

	// namespace
	// Read Only: true
	Namespace string `json:"namespace,omitempty"`

	// parameters
	// Read Only: true
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// process Id
	// Read Only: true
	ProcessID string `json:"processId,omitempty"`

	// process type
	// Read Only: true
	ProcessType *ProcessType `json:"processType,omitempty"`

	// space Id
	// Read Only: true
	SpaceID string `json:"spaceId,omitempty"`

	// started at
	// Read Only: true
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`

	// state
	// Read Only: true
	State State `json:"state,omitempty"`

	// user
	// Read Only: true
	User string `json:"user,omitempty"`
}

// Validate validates this operation
func (m *Operation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operation) validateEndedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.EndedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("endedAt", "body", "date-time", m.EndedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Operation) validateErrorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorType) {

		return nil
	}

	if err := m.ErrorType.Validate(formats); err != nil {

		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errorType")
		}
		return nil

	}
	return nil
}

func (m *Operation) validateMessages(formats strfmt.Registry) error {

	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Operation) validateProcessType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessType) { // not required
		return nil
	}

	if m.ProcessType != nil {
		if err := m.ProcessType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processType")
			}
			return err
		}
	}

	return nil
}

func (m *Operation) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("startedAt", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Operation) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Operation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operation) UnmarshalBinary(b []byte) error {
	var res Operation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
